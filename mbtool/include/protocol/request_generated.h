// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_REQUEST_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

#include "crypto_decrypt_generated.h"
#include "crypto_get_pw_type_generated.h"
#include "file_chmod_generated.h"
#include "file_close_generated.h"
#include "file_open_generated.h"
#include "file_read_generated.h"
#include "file_seek_generated.h"
#include "file_selinux_get_label_generated.h"
#include "file_selinux_set_label_generated.h"
#include "file_stat_generated.h"
#include "file_write_generated.h"
#include "mb_get_booted_rom_id_generated.h"
#include "mb_get_installed_roms_generated.h"
#include "mb_get_packages_count_generated.h"
#include "mb_get_version_generated.h"
#include "mb_set_kernel_generated.h"
#include "mb_switch_rom_generated.h"
#include "mb_wipe_rom_generated.h"
#include "path_chmod_generated.h"
#include "path_copy_generated.h"
#include "path_delete_generated.h"
#include "path_get_directory_size_generated.h"
#include "path_mkdir_generated.h"
#include "path_readlink_generated.h"
#include "path_selinux_get_label_generated.h"
#include "path_selinux_set_label_generated.h"
#include "reboot_generated.h"
#include "shutdown_generated.h"
#include "signed_exec_generated.h"

namespace mbtool {
namespace daemon {
namespace v3 {

struct Request;

enum RequestType {
  RequestType_NONE = 0,
  RequestType_FileChmodRequest = 1,
  RequestType_FileCloseRequest = 2,
  RequestType_FileOpenRequest = 3,
  RequestType_FileReadRequest = 4,
  RequestType_FileSeekRequest = 5,
  RequestType_FileStatRequest = 6,
  RequestType_FileWriteRequest = 7,
  RequestType_FileSELinuxGetLabelRequest = 8,
  RequestType_FileSELinuxSetLabelRequest = 9,
  RequestType_PathChmodRequest = 10,
  RequestType_PathCopyRequest = 11,
  RequestType_PathSELinuxGetLabelRequest = 12,
  RequestType_PathSELinuxSetLabelRequest = 13,
  RequestType_PathGetDirectorySizeRequest = 14,
  RequestType_MbGetVersionRequest = 15,
  RequestType_MbGetInstalledRomsRequest = 16,
  RequestType_MbGetBootedRomIdRequest = 17,
  RequestType_MbSwitchRomRequest = 18,
  RequestType_MbSetKernelRequest = 19,
  RequestType_MbWipeRomRequest = 20,
  RequestType_MbGetPackagesCountRequest = 21,
  RequestType_RebootRequest = 22,
  RequestType_SignedExecRequest = 23,
  RequestType_ShutdownRequest = 24,
  RequestType_PathDeleteRequest = 25,
  RequestType_PathMkdirRequest = 26,
  RequestType_CryptoDecryptRequest = 27,
  RequestType_CryptoGetPwTypeRequest = 28,
  RequestType_PathReadlinkRequest = 29,
  RequestType_MIN = RequestType_NONE,
  RequestType_MAX = RequestType_PathReadlinkRequest
};

inline const RequestType (&EnumValuesRequestType())[30] {
  static const RequestType values[] = {
    RequestType_NONE,
    RequestType_FileChmodRequest,
    RequestType_FileCloseRequest,
    RequestType_FileOpenRequest,
    RequestType_FileReadRequest,
    RequestType_FileSeekRequest,
    RequestType_FileStatRequest,
    RequestType_FileWriteRequest,
    RequestType_FileSELinuxGetLabelRequest,
    RequestType_FileSELinuxSetLabelRequest,
    RequestType_PathChmodRequest,
    RequestType_PathCopyRequest,
    RequestType_PathSELinuxGetLabelRequest,
    RequestType_PathSELinuxSetLabelRequest,
    RequestType_PathGetDirectorySizeRequest,
    RequestType_MbGetVersionRequest,
    RequestType_MbGetInstalledRomsRequest,
    RequestType_MbGetBootedRomIdRequest,
    RequestType_MbSwitchRomRequest,
    RequestType_MbSetKernelRequest,
    RequestType_MbWipeRomRequest,
    RequestType_MbGetPackagesCountRequest,
    RequestType_RebootRequest,
    RequestType_SignedExecRequest,
    RequestType_ShutdownRequest,
    RequestType_PathDeleteRequest,
    RequestType_PathMkdirRequest,
    RequestType_CryptoDecryptRequest,
    RequestType_CryptoGetPwTypeRequest,
    RequestType_PathReadlinkRequest
  };
  return values;
}

inline const char * const *EnumNamesRequestType() {
  static const char * const names[] = {
    "NONE",
    "FileChmodRequest",
    "FileCloseRequest",
    "FileOpenRequest",
    "FileReadRequest",
    "FileSeekRequest",
    "FileStatRequest",
    "FileWriteRequest",
    "FileSELinuxGetLabelRequest",
    "FileSELinuxSetLabelRequest",
    "PathChmodRequest",
    "PathCopyRequest",
    "PathSELinuxGetLabelRequest",
    "PathSELinuxSetLabelRequest",
    "PathGetDirectorySizeRequest",
    "MbGetVersionRequest",
    "MbGetInstalledRomsRequest",
    "MbGetBootedRomIdRequest",
    "MbSwitchRomRequest",
    "MbSetKernelRequest",
    "MbWipeRomRequest",
    "MbGetPackagesCountRequest",
    "RebootRequest",
    "SignedExecRequest",
    "ShutdownRequest",
    "PathDeleteRequest",
    "PathMkdirRequest",
    "CryptoDecryptRequest",
    "CryptoGetPwTypeRequest",
    "PathReadlinkRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestType(RequestType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesRequestType()[index];
}

template<typename T> struct RequestTypeTraits {
  static const RequestType enum_value = RequestType_NONE;
};

template<> struct RequestTypeTraits<FileChmodRequest> {
  static const RequestType enum_value = RequestType_FileChmodRequest;
};

template<> struct RequestTypeTraits<FileCloseRequest> {
  static const RequestType enum_value = RequestType_FileCloseRequest;
};

template<> struct RequestTypeTraits<FileOpenRequest> {
  static const RequestType enum_value = RequestType_FileOpenRequest;
};

template<> struct RequestTypeTraits<FileReadRequest> {
  static const RequestType enum_value = RequestType_FileReadRequest;
};

template<> struct RequestTypeTraits<FileSeekRequest> {
  static const RequestType enum_value = RequestType_FileSeekRequest;
};

template<> struct RequestTypeTraits<FileStatRequest> {
  static const RequestType enum_value = RequestType_FileStatRequest;
};

template<> struct RequestTypeTraits<FileWriteRequest> {
  static const RequestType enum_value = RequestType_FileWriteRequest;
};

template<> struct RequestTypeTraits<FileSELinuxGetLabelRequest> {
  static const RequestType enum_value = RequestType_FileSELinuxGetLabelRequest;
};

template<> struct RequestTypeTraits<FileSELinuxSetLabelRequest> {
  static const RequestType enum_value = RequestType_FileSELinuxSetLabelRequest;
};

template<> struct RequestTypeTraits<PathChmodRequest> {
  static const RequestType enum_value = RequestType_PathChmodRequest;
};

template<> struct RequestTypeTraits<PathCopyRequest> {
  static const RequestType enum_value = RequestType_PathCopyRequest;
};

template<> struct RequestTypeTraits<PathSELinuxGetLabelRequest> {
  static const RequestType enum_value = RequestType_PathSELinuxGetLabelRequest;
};

template<> struct RequestTypeTraits<PathSELinuxSetLabelRequest> {
  static const RequestType enum_value = RequestType_PathSELinuxSetLabelRequest;
};

template<> struct RequestTypeTraits<PathGetDirectorySizeRequest> {
  static const RequestType enum_value = RequestType_PathGetDirectorySizeRequest;
};

template<> struct RequestTypeTraits<MbGetVersionRequest> {
  static const RequestType enum_value = RequestType_MbGetVersionRequest;
};

template<> struct RequestTypeTraits<MbGetInstalledRomsRequest> {
  static const RequestType enum_value = RequestType_MbGetInstalledRomsRequest;
};

template<> struct RequestTypeTraits<MbGetBootedRomIdRequest> {
  static const RequestType enum_value = RequestType_MbGetBootedRomIdRequest;
};

template<> struct RequestTypeTraits<MbSwitchRomRequest> {
  static const RequestType enum_value = RequestType_MbSwitchRomRequest;
};

template<> struct RequestTypeTraits<MbSetKernelRequest> {
  static const RequestType enum_value = RequestType_MbSetKernelRequest;
};

template<> struct RequestTypeTraits<MbWipeRomRequest> {
  static const RequestType enum_value = RequestType_MbWipeRomRequest;
};

template<> struct RequestTypeTraits<MbGetPackagesCountRequest> {
  static const RequestType enum_value = RequestType_MbGetPackagesCountRequest;
};

template<> struct RequestTypeTraits<RebootRequest> {
  static const RequestType enum_value = RequestType_RebootRequest;
};

template<> struct RequestTypeTraits<SignedExecRequest> {
  static const RequestType enum_value = RequestType_SignedExecRequest;
};

template<> struct RequestTypeTraits<ShutdownRequest> {
  static const RequestType enum_value = RequestType_ShutdownRequest;
};

template<> struct RequestTypeTraits<PathDeleteRequest> {
  static const RequestType enum_value = RequestType_PathDeleteRequest;
};

template<> struct RequestTypeTraits<PathMkdirRequest> {
  static const RequestType enum_value = RequestType_PathMkdirRequest;
};

template<> struct RequestTypeTraits<CryptoDecryptRequest> {
  static const RequestType enum_value = RequestType_CryptoDecryptRequest;
};

template<> struct RequestTypeTraits<CryptoGetPwTypeRequest> {
  static const RequestType enum_value = RequestType_CryptoGetPwTypeRequest;
};

template<> struct RequestTypeTraits<PathReadlinkRequest> {
  static const RequestType enum_value = RequestType_PathReadlinkRequest;
};

bool VerifyRequestType(flatbuffers::Verifier &verifier, const void *obj, RequestType type);
bool VerifyRequestTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_REQUEST_TYPE = 4,
    VT_REQUEST = 6
  };
  RequestType request_type() const {
    return static_cast<RequestType>(GetField<uint8_t>(VT_REQUEST_TYPE, 0));
  }
  const void *request() const {
    return GetPointer<const void *>(VT_REQUEST);
  }
  template<typename T> const T *request_as() const;
  const FileChmodRequest *request_as_FileChmodRequest() const {
    return request_type() == RequestType_FileChmodRequest ? static_cast<const FileChmodRequest *>(request()) : nullptr;
  }
  const FileCloseRequest *request_as_FileCloseRequest() const {
    return request_type() == RequestType_FileCloseRequest ? static_cast<const FileCloseRequest *>(request()) : nullptr;
  }
  const FileOpenRequest *request_as_FileOpenRequest() const {
    return request_type() == RequestType_FileOpenRequest ? static_cast<const FileOpenRequest *>(request()) : nullptr;
  }
  const FileReadRequest *request_as_FileReadRequest() const {
    return request_type() == RequestType_FileReadRequest ? static_cast<const FileReadRequest *>(request()) : nullptr;
  }
  const FileSeekRequest *request_as_FileSeekRequest() const {
    return request_type() == RequestType_FileSeekRequest ? static_cast<const FileSeekRequest *>(request()) : nullptr;
  }
  const FileStatRequest *request_as_FileStatRequest() const {
    return request_type() == RequestType_FileStatRequest ? static_cast<const FileStatRequest *>(request()) : nullptr;
  }
  const FileWriteRequest *request_as_FileWriteRequest() const {
    return request_type() == RequestType_FileWriteRequest ? static_cast<const FileWriteRequest *>(request()) : nullptr;
  }
  const FileSELinuxGetLabelRequest *request_as_FileSELinuxGetLabelRequest() const {
    return request_type() == RequestType_FileSELinuxGetLabelRequest ? static_cast<const FileSELinuxGetLabelRequest *>(request()) : nullptr;
  }
  const FileSELinuxSetLabelRequest *request_as_FileSELinuxSetLabelRequest() const {
    return request_type() == RequestType_FileSELinuxSetLabelRequest ? static_cast<const FileSELinuxSetLabelRequest *>(request()) : nullptr;
  }
  const PathChmodRequest *request_as_PathChmodRequest() const {
    return request_type() == RequestType_PathChmodRequest ? static_cast<const PathChmodRequest *>(request()) : nullptr;
  }
  const PathCopyRequest *request_as_PathCopyRequest() const {
    return request_type() == RequestType_PathCopyRequest ? static_cast<const PathCopyRequest *>(request()) : nullptr;
  }
  const PathSELinuxGetLabelRequest *request_as_PathSELinuxGetLabelRequest() const {
    return request_type() == RequestType_PathSELinuxGetLabelRequest ? static_cast<const PathSELinuxGetLabelRequest *>(request()) : nullptr;
  }
  const PathSELinuxSetLabelRequest *request_as_PathSELinuxSetLabelRequest() const {
    return request_type() == RequestType_PathSELinuxSetLabelRequest ? static_cast<const PathSELinuxSetLabelRequest *>(request()) : nullptr;
  }
  const PathGetDirectorySizeRequest *request_as_PathGetDirectorySizeRequest() const {
    return request_type() == RequestType_PathGetDirectorySizeRequest ? static_cast<const PathGetDirectorySizeRequest *>(request()) : nullptr;
  }
  const MbGetVersionRequest *request_as_MbGetVersionRequest() const {
    return request_type() == RequestType_MbGetVersionRequest ? static_cast<const MbGetVersionRequest *>(request()) : nullptr;
  }
  const MbGetInstalledRomsRequest *request_as_MbGetInstalledRomsRequest() const {
    return request_type() == RequestType_MbGetInstalledRomsRequest ? static_cast<const MbGetInstalledRomsRequest *>(request()) : nullptr;
  }
  const MbGetBootedRomIdRequest *request_as_MbGetBootedRomIdRequest() const {
    return request_type() == RequestType_MbGetBootedRomIdRequest ? static_cast<const MbGetBootedRomIdRequest *>(request()) : nullptr;
  }
  const MbSwitchRomRequest *request_as_MbSwitchRomRequest() const {
    return request_type() == RequestType_MbSwitchRomRequest ? static_cast<const MbSwitchRomRequest *>(request()) : nullptr;
  }
  const MbSetKernelRequest *request_as_MbSetKernelRequest() const {
    return request_type() == RequestType_MbSetKernelRequest ? static_cast<const MbSetKernelRequest *>(request()) : nullptr;
  }
  const MbWipeRomRequest *request_as_MbWipeRomRequest() const {
    return request_type() == RequestType_MbWipeRomRequest ? static_cast<const MbWipeRomRequest *>(request()) : nullptr;
  }
  const MbGetPackagesCountRequest *request_as_MbGetPackagesCountRequest() const {
    return request_type() == RequestType_MbGetPackagesCountRequest ? static_cast<const MbGetPackagesCountRequest *>(request()) : nullptr;
  }
  const RebootRequest *request_as_RebootRequest() const {
    return request_type() == RequestType_RebootRequest ? static_cast<const RebootRequest *>(request()) : nullptr;
  }
  const SignedExecRequest *request_as_SignedExecRequest() const {
    return request_type() == RequestType_SignedExecRequest ? static_cast<const SignedExecRequest *>(request()) : nullptr;
  }
  const ShutdownRequest *request_as_ShutdownRequest() const {
    return request_type() == RequestType_ShutdownRequest ? static_cast<const ShutdownRequest *>(request()) : nullptr;
  }
  const PathDeleteRequest *request_as_PathDeleteRequest() const {
    return request_type() == RequestType_PathDeleteRequest ? static_cast<const PathDeleteRequest *>(request()) : nullptr;
  }
  const PathMkdirRequest *request_as_PathMkdirRequest() const {
    return request_type() == RequestType_PathMkdirRequest ? static_cast<const PathMkdirRequest *>(request()) : nullptr;
  }
  const CryptoDecryptRequest *request_as_CryptoDecryptRequest() const {
    return request_type() == RequestType_CryptoDecryptRequest ? static_cast<const CryptoDecryptRequest *>(request()) : nullptr;
  }
  const CryptoGetPwTypeRequest *request_as_CryptoGetPwTypeRequest() const {
    return request_type() == RequestType_CryptoGetPwTypeRequest ? static_cast<const CryptoGetPwTypeRequest *>(request()) : nullptr;
  }
  const PathReadlinkRequest *request_as_PathReadlinkRequest() const {
    return request_type() == RequestType_PathReadlinkRequest ? static_cast<const PathReadlinkRequest *>(request()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_REQUEST_TYPE) &&
           VerifyOffset(verifier, VT_REQUEST) &&
           VerifyRequestType(verifier, request(), request_type()) &&
           verifier.EndTable();
  }
};

template<> inline const FileChmodRequest *Request::request_as<FileChmodRequest>() const {
  return request_as_FileChmodRequest();
}

template<> inline const FileCloseRequest *Request::request_as<FileCloseRequest>() const {
  return request_as_FileCloseRequest();
}

template<> inline const FileOpenRequest *Request::request_as<FileOpenRequest>() const {
  return request_as_FileOpenRequest();
}

template<> inline const FileReadRequest *Request::request_as<FileReadRequest>() const {
  return request_as_FileReadRequest();
}

template<> inline const FileSeekRequest *Request::request_as<FileSeekRequest>() const {
  return request_as_FileSeekRequest();
}

template<> inline const FileStatRequest *Request::request_as<FileStatRequest>() const {
  return request_as_FileStatRequest();
}

template<> inline const FileWriteRequest *Request::request_as<FileWriteRequest>() const {
  return request_as_FileWriteRequest();
}

template<> inline const FileSELinuxGetLabelRequest *Request::request_as<FileSELinuxGetLabelRequest>() const {
  return request_as_FileSELinuxGetLabelRequest();
}

template<> inline const FileSELinuxSetLabelRequest *Request::request_as<FileSELinuxSetLabelRequest>() const {
  return request_as_FileSELinuxSetLabelRequest();
}

template<> inline const PathChmodRequest *Request::request_as<PathChmodRequest>() const {
  return request_as_PathChmodRequest();
}

template<> inline const PathCopyRequest *Request::request_as<PathCopyRequest>() const {
  return request_as_PathCopyRequest();
}

template<> inline const PathSELinuxGetLabelRequest *Request::request_as<PathSELinuxGetLabelRequest>() const {
  return request_as_PathSELinuxGetLabelRequest();
}

template<> inline const PathSELinuxSetLabelRequest *Request::request_as<PathSELinuxSetLabelRequest>() const {
  return request_as_PathSELinuxSetLabelRequest();
}

template<> inline const PathGetDirectorySizeRequest *Request::request_as<PathGetDirectorySizeRequest>() const {
  return request_as_PathGetDirectorySizeRequest();
}

template<> inline const MbGetVersionRequest *Request::request_as<MbGetVersionRequest>() const {
  return request_as_MbGetVersionRequest();
}

template<> inline const MbGetInstalledRomsRequest *Request::request_as<MbGetInstalledRomsRequest>() const {
  return request_as_MbGetInstalledRomsRequest();
}

template<> inline const MbGetBootedRomIdRequest *Request::request_as<MbGetBootedRomIdRequest>() const {
  return request_as_MbGetBootedRomIdRequest();
}

template<> inline const MbSwitchRomRequest *Request::request_as<MbSwitchRomRequest>() const {
  return request_as_MbSwitchRomRequest();
}

template<> inline const MbSetKernelRequest *Request::request_as<MbSetKernelRequest>() const {
  return request_as_MbSetKernelRequest();
}

template<> inline const MbWipeRomRequest *Request::request_as<MbWipeRomRequest>() const {
  return request_as_MbWipeRomRequest();
}

template<> inline const MbGetPackagesCountRequest *Request::request_as<MbGetPackagesCountRequest>() const {
  return request_as_MbGetPackagesCountRequest();
}

template<> inline const RebootRequest *Request::request_as<RebootRequest>() const {
  return request_as_RebootRequest();
}

template<> inline const SignedExecRequest *Request::request_as<SignedExecRequest>() const {
  return request_as_SignedExecRequest();
}

template<> inline const ShutdownRequest *Request::request_as<ShutdownRequest>() const {
  return request_as_ShutdownRequest();
}

template<> inline const PathDeleteRequest *Request::request_as<PathDeleteRequest>() const {
  return request_as_PathDeleteRequest();
}

template<> inline const PathMkdirRequest *Request::request_as<PathMkdirRequest>() const {
  return request_as_PathMkdirRequest();
}

template<> inline const CryptoDecryptRequest *Request::request_as<CryptoDecryptRequest>() const {
  return request_as_CryptoDecryptRequest();
}

template<> inline const CryptoGetPwTypeRequest *Request::request_as<CryptoGetPwTypeRequest>() const {
  return request_as_CryptoGetPwTypeRequest();
}

template<> inline const PathReadlinkRequest *Request::request_as<PathReadlinkRequest>() const {
  return request_as_PathReadlinkRequest();
}

struct RequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_request_type(RequestType request_type) {
    fbb_.AddElement<uint8_t>(Request::VT_REQUEST_TYPE, static_cast<uint8_t>(request_type), 0);
  }
  void add_request(flatbuffers::Offset<void> request) {
    fbb_.AddOffset(Request::VT_REQUEST, request);
  }
  explicit RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestBuilder &operator=(const RequestBuilder &);
  flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    RequestType request_type = RequestType_NONE,
    flatbuffers::Offset<void> request = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_request(request);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

inline bool VerifyRequestType(flatbuffers::Verifier &verifier, const void *obj, RequestType type) {
  switch (type) {
    case RequestType_NONE: {
      return true;
    }
    case RequestType_FileChmodRequest: {
      auto ptr = reinterpret_cast<const FileChmodRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileCloseRequest: {
      auto ptr = reinterpret_cast<const FileCloseRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileOpenRequest: {
      auto ptr = reinterpret_cast<const FileOpenRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileReadRequest: {
      auto ptr = reinterpret_cast<const FileReadRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileSeekRequest: {
      auto ptr = reinterpret_cast<const FileSeekRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileStatRequest: {
      auto ptr = reinterpret_cast<const FileStatRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileWriteRequest: {
      auto ptr = reinterpret_cast<const FileWriteRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileSELinuxGetLabelRequest: {
      auto ptr = reinterpret_cast<const FileSELinuxGetLabelRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_FileSELinuxSetLabelRequest: {
      auto ptr = reinterpret_cast<const FileSELinuxSetLabelRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathChmodRequest: {
      auto ptr = reinterpret_cast<const PathChmodRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathCopyRequest: {
      auto ptr = reinterpret_cast<const PathCopyRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathSELinuxGetLabelRequest: {
      auto ptr = reinterpret_cast<const PathSELinuxGetLabelRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathSELinuxSetLabelRequest: {
      auto ptr = reinterpret_cast<const PathSELinuxSetLabelRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathGetDirectorySizeRequest: {
      auto ptr = reinterpret_cast<const PathGetDirectorySizeRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbGetVersionRequest: {
      auto ptr = reinterpret_cast<const MbGetVersionRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbGetInstalledRomsRequest: {
      auto ptr = reinterpret_cast<const MbGetInstalledRomsRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbGetBootedRomIdRequest: {
      auto ptr = reinterpret_cast<const MbGetBootedRomIdRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbSwitchRomRequest: {
      auto ptr = reinterpret_cast<const MbSwitchRomRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbSetKernelRequest: {
      auto ptr = reinterpret_cast<const MbSetKernelRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbWipeRomRequest: {
      auto ptr = reinterpret_cast<const MbWipeRomRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_MbGetPackagesCountRequest: {
      auto ptr = reinterpret_cast<const MbGetPackagesCountRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_RebootRequest: {
      auto ptr = reinterpret_cast<const RebootRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_SignedExecRequest: {
      auto ptr = reinterpret_cast<const SignedExecRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_ShutdownRequest: {
      auto ptr = reinterpret_cast<const ShutdownRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathDeleteRequest: {
      auto ptr = reinterpret_cast<const PathDeleteRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathMkdirRequest: {
      auto ptr = reinterpret_cast<const PathMkdirRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_CryptoDecryptRequest: {
      auto ptr = reinterpret_cast<const CryptoDecryptRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_CryptoGetPwTypeRequest: {
      auto ptr = reinterpret_cast<const CryptoGetPwTypeRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RequestType_PathReadlinkRequest: {
      auto ptr = reinterpret_cast<const PathReadlinkRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyRequestTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyRequestType(
        verifier,  values->Get(i), types->GetEnum<RequestType>(i))) {
      return false;
    }
  }
  return true;
}

inline const mbtool::daemon::v3::Request *GetRequest(const void *buf) {
  return flatbuffers::GetRoot<mbtool::daemon::v3::Request>(buf);
}

inline const mbtool::daemon::v3::Request *GetSizePrefixedRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<mbtool::daemon::v3::Request>(buf);
}

inline bool VerifyRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mbtool::daemon::v3::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<mbtool::daemon::v3::Request>(nullptr);
}

inline void FinishRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mbtool::daemon::v3::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mbtool::daemon::v3::Request> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_REQUEST_MBTOOL_DAEMON_V3_H_
