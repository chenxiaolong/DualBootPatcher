// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PATHDELETE_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_PATHDELETE_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

namespace mbtool {
namespace daemon {
namespace v3 {

struct PathDeleteError;

struct PathDeleteRequest;

struct PathDeleteResponse;

enum PathDeleteFlag {
  PathDeleteFlag_REMOVE = 0,
  PathDeleteFlag_UNLINK = 1,
  PathDeleteFlag_RMDIR = 2,
  PathDeleteFlag_RECURSIVE = 3,
  PathDeleteFlag_MIN = PathDeleteFlag_REMOVE,
  PathDeleteFlag_MAX = PathDeleteFlag_RECURSIVE
};

inline const PathDeleteFlag (&EnumValuesPathDeleteFlag())[4] {
  static const PathDeleteFlag values[] = {
    PathDeleteFlag_REMOVE,
    PathDeleteFlag_UNLINK,
    PathDeleteFlag_RMDIR,
    PathDeleteFlag_RECURSIVE
  };
  return values;
}

inline const char * const *EnumNamesPathDeleteFlag() {
  static const char * const names[] = {
    "REMOVE",
    "UNLINK",
    "RMDIR",
    "RECURSIVE",
    nullptr
  };
  return names;
}

inline const char *EnumNamePathDeleteFlag(PathDeleteFlag e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPathDeleteFlag()[index];
}

struct PathDeleteError FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERRNO_VALUE = 4,
    VT_MSG = 6
  };
  int32_t errno_value() const {
    return GetField<int32_t>(VT_ERRNO_VALUE, 0);
  }
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERRNO_VALUE) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.VerifyString(msg()) &&
           verifier.EndTable();
  }
};

struct PathDeleteErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_errno_value(int32_t errno_value) {
    fbb_.AddElement<int32_t>(PathDeleteError::VT_ERRNO_VALUE, errno_value, 0);
  }
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(PathDeleteError::VT_MSG, msg);
  }
  explicit PathDeleteErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PathDeleteErrorBuilder &operator=(const PathDeleteErrorBuilder &);
  flatbuffers::Offset<PathDeleteError> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PathDeleteError>(end);
    return o;
  }
};

inline flatbuffers::Offset<PathDeleteError> CreatePathDeleteError(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t errno_value = 0,
    flatbuffers::Offset<flatbuffers::String> msg = 0) {
  PathDeleteErrorBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_errno_value(errno_value);
  return builder_.Finish();
}

inline flatbuffers::Offset<PathDeleteError> CreatePathDeleteErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t errno_value = 0,
    const char *msg = nullptr) {
  return mbtool::daemon::v3::CreatePathDeleteError(
      _fbb,
      errno_value,
      msg ? _fbb.CreateString(msg) : 0);
}

struct PathDeleteRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PATH = 4,
    VT_FLAG = 6
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  PathDeleteFlag flag() const {
    return static_cast<PathDeleteFlag>(GetField<int16_t>(VT_FLAG, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyField<int16_t>(verifier, VT_FLAG) &&
           verifier.EndTable();
  }
};

struct PathDeleteRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(PathDeleteRequest::VT_PATH, path);
  }
  void add_flag(PathDeleteFlag flag) {
    fbb_.AddElement<int16_t>(PathDeleteRequest::VT_FLAG, static_cast<int16_t>(flag), 0);
  }
  explicit PathDeleteRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PathDeleteRequestBuilder &operator=(const PathDeleteRequestBuilder &);
  flatbuffers::Offset<PathDeleteRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PathDeleteRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PathDeleteRequest> CreatePathDeleteRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    PathDeleteFlag flag = PathDeleteFlag_REMOVE) {
  PathDeleteRequestBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_flag(flag);
  return builder_.Finish();
}

inline flatbuffers::Offset<PathDeleteRequest> CreatePathDeleteRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr,
    PathDeleteFlag flag = PathDeleteFlag_REMOVE) {
  return mbtool::daemon::v3::CreatePathDeleteRequest(
      _fbb,
      path ? _fbb.CreateString(path) : 0,
      flag);
}

struct PathDeleteResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SUCCESS = 4,
    VT_ERROR_MSG = 6,
    VT_ERROR = 8
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  const flatbuffers::String *error_msg() const {
    return GetPointer<const flatbuffers::String *>(VT_ERROR_MSG);
  }
  const PathDeleteError *error() const {
    return GetPointer<const PathDeleteError *>(VT_ERROR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           VerifyOffset(verifier, VT_ERROR_MSG) &&
           verifier.VerifyString(error_msg()) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyTable(error()) &&
           verifier.EndTable();
  }
};

struct PathDeleteResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(PathDeleteResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  void add_error_msg(flatbuffers::Offset<flatbuffers::String> error_msg) {
    fbb_.AddOffset(PathDeleteResponse::VT_ERROR_MSG, error_msg);
  }
  void add_error(flatbuffers::Offset<PathDeleteError> error) {
    fbb_.AddOffset(PathDeleteResponse::VT_ERROR, error);
  }
  explicit PathDeleteResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PathDeleteResponseBuilder &operator=(const PathDeleteResponseBuilder &);
  flatbuffers::Offset<PathDeleteResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PathDeleteResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<PathDeleteResponse> CreatePathDeleteResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    flatbuffers::Offset<flatbuffers::String> error_msg = 0,
    flatbuffers::Offset<PathDeleteError> error = 0) {
  PathDeleteResponseBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_error_msg(error_msg);
  builder_.add_success(success);
  return builder_.Finish();
}

inline flatbuffers::Offset<PathDeleteResponse> CreatePathDeleteResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    const char *error_msg = nullptr,
    flatbuffers::Offset<PathDeleteError> error = 0) {
  return mbtool::daemon::v3::CreatePathDeleteResponse(
      _fbb,
      success,
      error_msg ? _fbb.CreateString(error_msg) : 0,
      error);
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_PATHDELETE_MBTOOL_DAEMON_V3_H_
