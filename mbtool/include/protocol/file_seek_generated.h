// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FILESEEK_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_FILESEEK_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

namespace mbtool {
namespace daemon {
namespace v3 {

struct FileSeekError;

struct FileSeekRequest;

struct FileSeekResponse;

enum FileSeekWhence {
  FileSeekWhence_SEEK_SET = 0,
  FileSeekWhence_SEEK_CUR = 1,
  FileSeekWhence_SEEK_END = 2,
  FileSeekWhence_MIN = FileSeekWhence_SEEK_SET,
  FileSeekWhence_MAX = FileSeekWhence_SEEK_END
};

inline const FileSeekWhence (&EnumValuesFileSeekWhence())[3] {
  static const FileSeekWhence values[] = {
    FileSeekWhence_SEEK_SET,
    FileSeekWhence_SEEK_CUR,
    FileSeekWhence_SEEK_END
  };
  return values;
}

inline const char * const *EnumNamesFileSeekWhence() {
  static const char * const names[] = {
    "SEEK_SET",
    "SEEK_CUR",
    "SEEK_END",
    nullptr
  };
  return names;
}

inline const char *EnumNameFileSeekWhence(FileSeekWhence e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesFileSeekWhence()[index];
}

struct FileSeekError FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERRNO_VALUE = 4,
    VT_MSG = 6
  };
  int32_t errno_value() const {
    return GetField<int32_t>(VT_ERRNO_VALUE, 0);
  }
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERRNO_VALUE) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.VerifyString(msg()) &&
           verifier.EndTable();
  }
};

struct FileSeekErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_errno_value(int32_t errno_value) {
    fbb_.AddElement<int32_t>(FileSeekError::VT_ERRNO_VALUE, errno_value, 0);
  }
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(FileSeekError::VT_MSG, msg);
  }
  explicit FileSeekErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FileSeekErrorBuilder &operator=(const FileSeekErrorBuilder &);
  flatbuffers::Offset<FileSeekError> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FileSeekError>(end);
    return o;
  }
};

inline flatbuffers::Offset<FileSeekError> CreateFileSeekError(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t errno_value = 0,
    flatbuffers::Offset<flatbuffers::String> msg = 0) {
  FileSeekErrorBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_errno_value(errno_value);
  return builder_.Finish();
}

inline flatbuffers::Offset<FileSeekError> CreateFileSeekErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t errno_value = 0,
    const char *msg = nullptr) {
  return mbtool::daemon::v3::CreateFileSeekError(
      _fbb,
      errno_value,
      msg ? _fbb.CreateString(msg) : 0);
}

struct FileSeekRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_OFFSET = 6,
    VT_WHENCE = 8
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int64_t offset() const {
    return GetField<int64_t>(VT_OFFSET, 0);
  }
  FileSeekWhence whence() const {
    return static_cast<FileSeekWhence>(GetField<int16_t>(VT_WHENCE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<int64_t>(verifier, VT_OFFSET) &&
           VerifyField<int16_t>(verifier, VT_WHENCE) &&
           verifier.EndTable();
  }
};

struct FileSeekRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(FileSeekRequest::VT_ID, id, 0);
  }
  void add_offset(int64_t offset) {
    fbb_.AddElement<int64_t>(FileSeekRequest::VT_OFFSET, offset, 0);
  }
  void add_whence(FileSeekWhence whence) {
    fbb_.AddElement<int16_t>(FileSeekRequest::VT_WHENCE, static_cast<int16_t>(whence), 0);
  }
  explicit FileSeekRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FileSeekRequestBuilder &operator=(const FileSeekRequestBuilder &);
  flatbuffers::Offset<FileSeekRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FileSeekRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<FileSeekRequest> CreateFileSeekRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    int64_t offset = 0,
    FileSeekWhence whence = FileSeekWhence_SEEK_SET) {
  FileSeekRequestBuilder builder_(_fbb);
  builder_.add_offset(offset);
  builder_.add_id(id);
  builder_.add_whence(whence);
  return builder_.Finish();
}

struct FileSeekResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SUCCESS = 4,
    VT_ERROR_MSG = 6,
    VT_OFFSET = 8,
    VT_ERROR = 10
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  const flatbuffers::String *error_msg() const {
    return GetPointer<const flatbuffers::String *>(VT_ERROR_MSG);
  }
  int64_t offset() const {
    return GetField<int64_t>(VT_OFFSET, 0);
  }
  const FileSeekError *error() const {
    return GetPointer<const FileSeekError *>(VT_ERROR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           VerifyOffset(verifier, VT_ERROR_MSG) &&
           verifier.VerifyString(error_msg()) &&
           VerifyField<int64_t>(verifier, VT_OFFSET) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyTable(error()) &&
           verifier.EndTable();
  }
};

struct FileSeekResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(FileSeekResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  void add_error_msg(flatbuffers::Offset<flatbuffers::String> error_msg) {
    fbb_.AddOffset(FileSeekResponse::VT_ERROR_MSG, error_msg);
  }
  void add_offset(int64_t offset) {
    fbb_.AddElement<int64_t>(FileSeekResponse::VT_OFFSET, offset, 0);
  }
  void add_error(flatbuffers::Offset<FileSeekError> error) {
    fbb_.AddOffset(FileSeekResponse::VT_ERROR, error);
  }
  explicit FileSeekResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FileSeekResponseBuilder &operator=(const FileSeekResponseBuilder &);
  flatbuffers::Offset<FileSeekResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FileSeekResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<FileSeekResponse> CreateFileSeekResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    flatbuffers::Offset<flatbuffers::String> error_msg = 0,
    int64_t offset = 0,
    flatbuffers::Offset<FileSeekError> error = 0) {
  FileSeekResponseBuilder builder_(_fbb);
  builder_.add_offset(offset);
  builder_.add_error(error);
  builder_.add_error_msg(error_msg);
  builder_.add_success(success);
  return builder_.Finish();
}

inline flatbuffers::Offset<FileSeekResponse> CreateFileSeekResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    const char *error_msg = nullptr,
    int64_t offset = 0,
    flatbuffers::Offset<FileSeekError> error = 0) {
  return mbtool::daemon::v3::CreateFileSeekResponse(
      _fbb,
      success,
      error_msg ? _fbb.CreateString(error_msg) : 0,
      offset,
      error);
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_FILESEEK_MBTOOL_DAEMON_V3_H_
