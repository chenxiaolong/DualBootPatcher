// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MBGETBOOTEDROMID_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_MBGETBOOTEDROMID_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

namespace mbtool {
namespace daemon {
namespace v3 {

struct MbGetBootedRomIdRequest;

struct MbGetBootedRomIdResponse;

struct MbGetBootedRomIdRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct MbGetBootedRomIdRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit MbGetBootedRomIdRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MbGetBootedRomIdRequestBuilder &operator=(const MbGetBootedRomIdRequestBuilder &);
  flatbuffers::Offset<MbGetBootedRomIdRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MbGetBootedRomIdRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<MbGetBootedRomIdRequest> CreateMbGetBootedRomIdRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  MbGetBootedRomIdRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct MbGetBootedRomIdResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ROM_ID = 4
  };
  const flatbuffers::String *rom_id() const {
    return GetPointer<const flatbuffers::String *>(VT_ROM_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ROM_ID) &&
           verifier.VerifyString(rom_id()) &&
           verifier.EndTable();
  }
};

struct MbGetBootedRomIdResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rom_id(flatbuffers::Offset<flatbuffers::String> rom_id) {
    fbb_.AddOffset(MbGetBootedRomIdResponse::VT_ROM_ID, rom_id);
  }
  explicit MbGetBootedRomIdResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MbGetBootedRomIdResponseBuilder &operator=(const MbGetBootedRomIdResponseBuilder &);
  flatbuffers::Offset<MbGetBootedRomIdResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MbGetBootedRomIdResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<MbGetBootedRomIdResponse> CreateMbGetBootedRomIdResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> rom_id = 0) {
  MbGetBootedRomIdResponseBuilder builder_(_fbb);
  builder_.add_rom_id(rom_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<MbGetBootedRomIdResponse> CreateMbGetBootedRomIdResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *rom_id = nullptr) {
  return mbtool::daemon::v3::CreateMbGetBootedRomIdResponse(
      _fbb,
      rom_id ? _fbb.CreateString(rom_id) : 0);
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_MBGETBOOTEDROMID_MBTOOL_DAEMON_V3_H_
