// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MBSETKERNEL_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_MBSETKERNEL_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

namespace mbtool {
namespace daemon {
namespace v3 {

struct MbSetKernelError;

struct MbSetKernelRequest;

struct MbSetKernelResponse;

struct MbSetKernelError FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct MbSetKernelErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit MbSetKernelErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MbSetKernelErrorBuilder &operator=(const MbSetKernelErrorBuilder &);
  flatbuffers::Offset<MbSetKernelError> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MbSetKernelError>(end);
    return o;
  }
};

inline flatbuffers::Offset<MbSetKernelError> CreateMbSetKernelError(
    flatbuffers::FlatBufferBuilder &_fbb) {
  MbSetKernelErrorBuilder builder_(_fbb);
  return builder_.Finish();
}

struct MbSetKernelRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ROM_ID = 4,
    VT_BOOT_BLOCKDEV = 6
  };
  const flatbuffers::String *rom_id() const {
    return GetPointer<const flatbuffers::String *>(VT_ROM_ID);
  }
  const flatbuffers::String *boot_blockdev() const {
    return GetPointer<const flatbuffers::String *>(VT_BOOT_BLOCKDEV);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ROM_ID) &&
           verifier.VerifyString(rom_id()) &&
           VerifyOffset(verifier, VT_BOOT_BLOCKDEV) &&
           verifier.VerifyString(boot_blockdev()) &&
           verifier.EndTable();
  }
};

struct MbSetKernelRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rom_id(flatbuffers::Offset<flatbuffers::String> rom_id) {
    fbb_.AddOffset(MbSetKernelRequest::VT_ROM_ID, rom_id);
  }
  void add_boot_blockdev(flatbuffers::Offset<flatbuffers::String> boot_blockdev) {
    fbb_.AddOffset(MbSetKernelRequest::VT_BOOT_BLOCKDEV, boot_blockdev);
  }
  explicit MbSetKernelRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MbSetKernelRequestBuilder &operator=(const MbSetKernelRequestBuilder &);
  flatbuffers::Offset<MbSetKernelRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MbSetKernelRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<MbSetKernelRequest> CreateMbSetKernelRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> rom_id = 0,
    flatbuffers::Offset<flatbuffers::String> boot_blockdev = 0) {
  MbSetKernelRequestBuilder builder_(_fbb);
  builder_.add_boot_blockdev(boot_blockdev);
  builder_.add_rom_id(rom_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<MbSetKernelRequest> CreateMbSetKernelRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *rom_id = nullptr,
    const char *boot_blockdev = nullptr) {
  return mbtool::daemon::v3::CreateMbSetKernelRequest(
      _fbb,
      rom_id ? _fbb.CreateString(rom_id) : 0,
      boot_blockdev ? _fbb.CreateString(boot_blockdev) : 0);
}

struct MbSetKernelResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SUCCESS = 4,
    VT_ERROR = 6
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  const MbSetKernelError *error() const {
    return GetPointer<const MbSetKernelError *>(VT_ERROR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyTable(error()) &&
           verifier.EndTable();
  }
};

struct MbSetKernelResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(MbSetKernelResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  void add_error(flatbuffers::Offset<MbSetKernelError> error) {
    fbb_.AddOffset(MbSetKernelResponse::VT_ERROR, error);
  }
  explicit MbSetKernelResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MbSetKernelResponseBuilder &operator=(const MbSetKernelResponseBuilder &);
  flatbuffers::Offset<MbSetKernelResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MbSetKernelResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<MbSetKernelResponse> CreateMbSetKernelResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    flatbuffers::Offset<MbSetKernelError> error = 0) {
  MbSetKernelResponseBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_success(success);
  return builder_.Finish();
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_MBSETKERNEL_MBTOOL_DAEMON_V3_H_
