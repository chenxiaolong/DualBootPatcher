// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PATHREADLINK_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_PATHREADLINK_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

namespace mbtool {
namespace daemon {
namespace v3 {

struct PathReadlinkError;

struct PathReadlinkRequest;

struct PathReadlinkResponse;

struct PathReadlinkError FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERRNO_VALUE = 4,
    VT_MSG = 6
  };
  int32_t errno_value() const {
    return GetField<int32_t>(VT_ERRNO_VALUE, 0);
  }
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERRNO_VALUE) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.Verify(msg()) &&
           verifier.EndTable();
  }
};

struct PathReadlinkErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_errno_value(int32_t errno_value) {
    fbb_.AddElement<int32_t>(PathReadlinkError::VT_ERRNO_VALUE, errno_value, 0);
  }
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(PathReadlinkError::VT_MSG, msg);
  }
  explicit PathReadlinkErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PathReadlinkErrorBuilder &operator=(const PathReadlinkErrorBuilder &);
  flatbuffers::Offset<PathReadlinkError> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PathReadlinkError>(end);
    return o;
  }
};

inline flatbuffers::Offset<PathReadlinkError> CreatePathReadlinkError(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t errno_value = 0,
    flatbuffers::Offset<flatbuffers::String> msg = 0) {
  PathReadlinkErrorBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_errno_value(errno_value);
  return builder_.Finish();
}

inline flatbuffers::Offset<PathReadlinkError> CreatePathReadlinkErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t errno_value = 0,
    const char *msg = nullptr) {
  return mbtool::daemon::v3::CreatePathReadlinkError(
      _fbb,
      errno_value,
      msg ? _fbb.CreateString(msg) : 0);
}

struct PathReadlinkRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PATH = 4
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.Verify(path()) &&
           verifier.EndTable();
  }
};

struct PathReadlinkRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(PathReadlinkRequest::VT_PATH, path);
  }
  explicit PathReadlinkRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PathReadlinkRequestBuilder &operator=(const PathReadlinkRequestBuilder &);
  flatbuffers::Offset<PathReadlinkRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PathReadlinkRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<PathReadlinkRequest> CreatePathReadlinkRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  PathReadlinkRequestBuilder builder_(_fbb);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<PathReadlinkRequest> CreatePathReadlinkRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr) {
  return mbtool::daemon::v3::CreatePathReadlinkRequest(
      _fbb,
      path ? _fbb.CreateString(path) : 0);
}

struct PathReadlinkResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TARGET = 4,
    VT_ERROR = 6
  };
  const flatbuffers::String *target() const {
    return GetPointer<const flatbuffers::String *>(VT_TARGET);
  }
  const PathReadlinkError *error() const {
    return GetPointer<const PathReadlinkError *>(VT_ERROR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TARGET) &&
           verifier.Verify(target()) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyTable(error()) &&
           verifier.EndTable();
  }
};

struct PathReadlinkResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_target(flatbuffers::Offset<flatbuffers::String> target) {
    fbb_.AddOffset(PathReadlinkResponse::VT_TARGET, target);
  }
  void add_error(flatbuffers::Offset<PathReadlinkError> error) {
    fbb_.AddOffset(PathReadlinkResponse::VT_ERROR, error);
  }
  explicit PathReadlinkResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PathReadlinkResponseBuilder &operator=(const PathReadlinkResponseBuilder &);
  flatbuffers::Offset<PathReadlinkResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PathReadlinkResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<PathReadlinkResponse> CreatePathReadlinkResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> target = 0,
    flatbuffers::Offset<PathReadlinkError> error = 0) {
  PathReadlinkResponseBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_target(target);
  return builder_.Finish();
}

inline flatbuffers::Offset<PathReadlinkResponse> CreatePathReadlinkResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *target = nullptr,
    flatbuffers::Offset<PathReadlinkError> error = 0) {
  return mbtool::daemon::v3::CreatePathReadlinkResponse(
      _fbb,
      target ? _fbb.CreateString(target) : 0,
      error);
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_PATHREADLINK_MBTOOL_DAEMON_V3_H_
