// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MBGETVERSION_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_MBGETVERSION_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

namespace mbtool {
namespace daemon {
namespace v3 {

struct MbGetVersionRequest;

struct MbGetVersionResponse;

struct MbGetVersionRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct MbGetVersionRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit MbGetVersionRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MbGetVersionRequestBuilder &operator=(const MbGetVersionRequestBuilder &);
  flatbuffers::Offset<MbGetVersionRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MbGetVersionRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<MbGetVersionRequest> CreateMbGetVersionRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  MbGetVersionRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct MbGetVersionResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VERSION = 4
  };
  const flatbuffers::String *version() const {
    return GetPointer<const flatbuffers::String *>(VT_VERSION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.Verify(version()) &&
           verifier.EndTable();
  }
};

struct MbGetVersionResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(flatbuffers::Offset<flatbuffers::String> version) {
    fbb_.AddOffset(MbGetVersionResponse::VT_VERSION, version);
  }
  explicit MbGetVersionResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MbGetVersionResponseBuilder &operator=(const MbGetVersionResponseBuilder &);
  flatbuffers::Offset<MbGetVersionResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MbGetVersionResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<MbGetVersionResponse> CreateMbGetVersionResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> version = 0) {
  MbGetVersionResponseBuilder builder_(_fbb);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<MbGetVersionResponse> CreateMbGetVersionResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *version = nullptr) {
  return mbtool::daemon::v3::CreateMbGetVersionResponse(
      _fbb,
      version ? _fbb.CreateString(version) : 0);
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_MBGETVERSION_MBTOOL_DAEMON_V3_H_
