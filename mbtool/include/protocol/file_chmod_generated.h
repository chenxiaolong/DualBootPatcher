// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FILECHMOD_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_FILECHMOD_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

namespace mbtool {
namespace daemon {
namespace v3 {

struct FileChmodError;

struct FileChmodRequest;

struct FileChmodResponse;

struct FileChmodError FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERRNO_VALUE = 4,
    VT_MSG = 6
  };
  int32_t errno_value() const {
    return GetField<int32_t>(VT_ERRNO_VALUE, 0);
  }
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERRNO_VALUE) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.VerifyString(msg()) &&
           verifier.EndTable();
  }
};

struct FileChmodErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_errno_value(int32_t errno_value) {
    fbb_.AddElement<int32_t>(FileChmodError::VT_ERRNO_VALUE, errno_value, 0);
  }
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(FileChmodError::VT_MSG, msg);
  }
  explicit FileChmodErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FileChmodErrorBuilder &operator=(const FileChmodErrorBuilder &);
  flatbuffers::Offset<FileChmodError> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FileChmodError>(end);
    return o;
  }
};

inline flatbuffers::Offset<FileChmodError> CreateFileChmodError(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t errno_value = 0,
    flatbuffers::Offset<flatbuffers::String> msg = 0) {
  FileChmodErrorBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_errno_value(errno_value);
  return builder_.Finish();
}

inline flatbuffers::Offset<FileChmodError> CreateFileChmodErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t errno_value = 0,
    const char *msg = nullptr) {
  return mbtool::daemon::v3::CreateFileChmodError(
      _fbb,
      errno_value,
      msg ? _fbb.CreateString(msg) : 0);
}

struct FileChmodRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_MODE = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  uint32_t mode() const {
    return GetField<uint32_t>(VT_MODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<uint32_t>(verifier, VT_MODE) &&
           verifier.EndTable();
  }
};

struct FileChmodRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(FileChmodRequest::VT_ID, id, 0);
  }
  void add_mode(uint32_t mode) {
    fbb_.AddElement<uint32_t>(FileChmodRequest::VT_MODE, mode, 0);
  }
  explicit FileChmodRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FileChmodRequestBuilder &operator=(const FileChmodRequestBuilder &);
  flatbuffers::Offset<FileChmodRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FileChmodRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<FileChmodRequest> CreateFileChmodRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    uint32_t mode = 0) {
  FileChmodRequestBuilder builder_(_fbb);
  builder_.add_mode(mode);
  builder_.add_id(id);
  return builder_.Finish();
}

struct FileChmodResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SUCCESS = 4,
    VT_ERROR_MSG = 6,
    VT_ERROR = 8
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  const flatbuffers::String *error_msg() const {
    return GetPointer<const flatbuffers::String *>(VT_ERROR_MSG);
  }
  const FileChmodError *error() const {
    return GetPointer<const FileChmodError *>(VT_ERROR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           VerifyOffset(verifier, VT_ERROR_MSG) &&
           verifier.VerifyString(error_msg()) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyTable(error()) &&
           verifier.EndTable();
  }
};

struct FileChmodResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(FileChmodResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  void add_error_msg(flatbuffers::Offset<flatbuffers::String> error_msg) {
    fbb_.AddOffset(FileChmodResponse::VT_ERROR_MSG, error_msg);
  }
  void add_error(flatbuffers::Offset<FileChmodError> error) {
    fbb_.AddOffset(FileChmodResponse::VT_ERROR, error);
  }
  explicit FileChmodResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FileChmodResponseBuilder &operator=(const FileChmodResponseBuilder &);
  flatbuffers::Offset<FileChmodResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FileChmodResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<FileChmodResponse> CreateFileChmodResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    flatbuffers::Offset<flatbuffers::String> error_msg = 0,
    flatbuffers::Offset<FileChmodError> error = 0) {
  FileChmodResponseBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_error_msg(error_msg);
  builder_.add_success(success);
  return builder_.Finish();
}

inline flatbuffers::Offset<FileChmodResponse> CreateFileChmodResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    const char *error_msg = nullptr,
    flatbuffers::Offset<FileChmodError> error = 0) {
  return mbtool::daemon::v3::CreateFileChmodResponse(
      _fbb,
      success,
      error_msg ? _fbb.CreateString(error_msg) : 0,
      error);
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_FILECHMOD_MBTOOL_DAEMON_V3_H_
