// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CRYPTODECRYPT_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_CRYPTODECRYPT_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"


namespace mbtool {
namespace daemon {
namespace v3 {

struct CryptoDecryptRequest;
struct CryptoDecryptResponse;

struct CryptoDecryptRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PASSWORD = 4
  };
  const flatbuffers::String *password() const { return GetPointer<const flatbuffers::String *>(VT_PASSWORD); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PASSWORD) &&
           verifier.Verify(password()) &&
           verifier.EndTable();
  }
};

struct CryptoDecryptRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_password(flatbuffers::Offset<flatbuffers::String> password) { fbb_.AddOffset(CryptoDecryptRequest::VT_PASSWORD, password); }
  CryptoDecryptRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CryptoDecryptRequestBuilder &operator=(const CryptoDecryptRequestBuilder &);
  flatbuffers::Offset<CryptoDecryptRequest> Finish() {
    auto o = flatbuffers::Offset<CryptoDecryptRequest>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<CryptoDecryptRequest> CreateCryptoDecryptRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> password = 0) {
  CryptoDecryptRequestBuilder builder_(_fbb);
  builder_.add_password(password);
  return builder_.Finish();
}

struct CryptoDecryptResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SUCCESS = 4
  };
  bool success() const { return GetField<uint8_t>(VT_SUCCESS, 0) != 0; }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           verifier.EndTable();
  }
};

struct CryptoDecryptResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) { fbb_.AddElement<uint8_t>(CryptoDecryptResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0); }
  CryptoDecryptResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CryptoDecryptResponseBuilder &operator=(const CryptoDecryptResponseBuilder &);
  flatbuffers::Offset<CryptoDecryptResponse> Finish() {
    auto o = flatbuffers::Offset<CryptoDecryptResponse>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<CryptoDecryptResponse> CreateCryptoDecryptResponse(flatbuffers::FlatBufferBuilder &_fbb,
   bool success = false) {
  CryptoDecryptResponseBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_CRYPTODECRYPT_MBTOOL_DAEMON_V3_H_
