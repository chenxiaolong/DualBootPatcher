// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_REQUEST_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_REQUEST_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

#include "crypto_decrypt_generated.h"
#include "crypto_get_pw_type_generated.h"
#include "file_chmod_generated.h"
#include "file_close_generated.h"
#include "file_open_generated.h"
#include "file_read_generated.h"
#include "file_seek_generated.h"
#include "file_selinux_get_label_generated.h"
#include "file_selinux_set_label_generated.h"
#include "file_stat_generated.h"
#include "file_write_generated.h"
#include "mb_get_booted_rom_id_generated.h"
#include "mb_get_installed_roms_generated.h"
#include "mb_get_packages_count_generated.h"
#include "mb_get_version_generated.h"
#include "mb_set_kernel_generated.h"
#include "mb_switch_rom_generated.h"
#include "mb_wipe_rom_generated.h"
#include "path_chmod_generated.h"
#include "path_copy_generated.h"
#include "path_delete_generated.h"
#include "path_get_directory_size_generated.h"
#include "path_mkdir_generated.h"
#include "path_selinux_get_label_generated.h"
#include "path_selinux_set_label_generated.h"
#include "reboot_generated.h"
#include "shutdown_generated.h"
#include "signed_exec_generated.h"

namespace mbtool {
namespace daemon {
namespace v3 {
struct CryptoDecryptRequest;
struct CryptoDecryptResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct CryptoGetPwTypeRequest;
struct CryptoGetPwTypeResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileChmodRequest;
struct FileChmodResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileCloseRequest;
struct FileCloseResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileOpenRequest;
struct FileOpenResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileReadRequest;
struct FileReadResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileSeekRequest;
struct FileSeekResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct StructStat;
struct FileStatRequest;
struct FileStatResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileWriteRequest;
struct FileWriteResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileSELinuxGetLabelRequest;
struct FileSELinuxGetLabelResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct FileSELinuxSetLabelRequest;
struct FileSELinuxSetLabelResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct PathChmodRequest;
struct PathChmodResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct PathCopyRequest;
struct PathCopyResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct PathDeleteRequest;
struct PathDeleteResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct PathMkdirRequest;
struct PathMkdirResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct PathSELinuxGetLabelRequest;
struct PathSELinuxGetLabelResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct PathSELinuxSetLabelRequest;
struct PathSELinuxSetLabelResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct PathGetDirectorySizeRequest;
struct PathGetDirectorySizeResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct SignedExecRequest;
struct SignedExecOutputResponse;
struct SignedExecResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct MbGetVersionRequest;
struct MbGetVersionResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct MbRom;
struct MbGetInstalledRomsRequest;
struct MbGetInstalledRomsResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct MbGetBootedRomIdRequest;
struct MbGetBootedRomIdResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct MbSwitchRomRequest;
struct MbSwitchRomResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct MbSetKernelRequest;
struct MbSetKernelResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct MbWipeRomRequest;
struct MbWipeRomResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct MbGetPackagesCountRequest;
struct MbGetPackagesCountResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct RebootRequest;
struct RebootResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool
namespace mbtool {
namespace daemon {
namespace v3 {
struct ShutdownRequest;
struct ShutdownResponse;
}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

namespace mbtool {
namespace daemon {
namespace v3 {

struct Request;

enum RequestType {
  RequestType_NONE = 0,
  RequestType_FileChmodRequest = 1,
  RequestType_FileCloseRequest = 2,
  RequestType_FileOpenRequest = 3,
  RequestType_FileReadRequest = 4,
  RequestType_FileSeekRequest = 5,
  RequestType_FileStatRequest = 6,
  RequestType_FileWriteRequest = 7,
  RequestType_FileSELinuxGetLabelRequest = 8,
  RequestType_FileSELinuxSetLabelRequest = 9,
  RequestType_PathChmodRequest = 10,
  RequestType_PathCopyRequest = 11,
  RequestType_PathSELinuxGetLabelRequest = 12,
  RequestType_PathSELinuxSetLabelRequest = 13,
  RequestType_PathGetDirectorySizeRequest = 14,
  RequestType_MbGetVersionRequest = 15,
  RequestType_MbGetInstalledRomsRequest = 16,
  RequestType_MbGetBootedRomIdRequest = 17,
  RequestType_MbSwitchRomRequest = 18,
  RequestType_MbSetKernelRequest = 19,
  RequestType_MbWipeRomRequest = 20,
  RequestType_MbGetPackagesCountRequest = 21,
  RequestType_RebootRequest = 22,
  RequestType_SignedExecRequest = 23,
  RequestType_ShutdownRequest = 24,
  RequestType_PathDeleteRequest = 25,
  RequestType_PathMkdirRequest = 26,
  RequestType_CryptoDecryptRequest = 27,
  RequestType_CryptoGetPwTypeRequest = 28,
  RequestType_MIN = RequestType_NONE,
  RequestType_MAX = RequestType_CryptoGetPwTypeRequest
};

inline const char **EnumNamesRequestType() {
  static const char *names[] = { "NONE", "FileChmodRequest", "FileCloseRequest", "FileOpenRequest", "FileReadRequest", "FileSeekRequest", "FileStatRequest", "FileWriteRequest", "FileSELinuxGetLabelRequest", "FileSELinuxSetLabelRequest", "PathChmodRequest", "PathCopyRequest", "PathSELinuxGetLabelRequest", "PathSELinuxSetLabelRequest", "PathGetDirectorySizeRequest", "MbGetVersionRequest", "MbGetInstalledRomsRequest", "MbGetBootedRomIdRequest", "MbSwitchRomRequest", "MbSetKernelRequest", "MbWipeRomRequest", "MbGetPackagesCountRequest", "RebootRequest", "SignedExecRequest", "ShutdownRequest", "PathDeleteRequest", "PathMkdirRequest", "CryptoDecryptRequest", "CryptoGetPwTypeRequest", nullptr };
  return names;
}

inline const char *EnumNameRequestType(RequestType e) { return EnumNamesRequestType()[static_cast<int>(e)]; }

inline bool VerifyRequestType(flatbuffers::Verifier &verifier, const void *union_obj, RequestType type);

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_REQUEST_TYPE = 4,
    VT_REQUEST = 6
  };
  RequestType request_type() const { return static_cast<RequestType>(GetField<uint8_t>(VT_REQUEST_TYPE, 0)); }
  const void *request() const { return GetPointer<const void *>(VT_REQUEST); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_REQUEST_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_REQUEST) &&
           VerifyRequestType(verifier, request(), request_type()) &&
           verifier.EndTable();
  }
};

struct RequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_request_type(RequestType request_type) { fbb_.AddElement<uint8_t>(Request::VT_REQUEST_TYPE, static_cast<uint8_t>(request_type), 0); }
  void add_request(flatbuffers::Offset<void> request) { fbb_.AddOffset(Request::VT_REQUEST, request); }
  RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RequestBuilder &operator=(const RequestBuilder &);
  flatbuffers::Offset<Request> Finish() {
    auto o = flatbuffers::Offset<Request>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(flatbuffers::FlatBufferBuilder &_fbb,
   RequestType request_type = RequestType_NONE,
   flatbuffers::Offset<void> request = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_request(request);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

inline bool VerifyRequestType(flatbuffers::Verifier &verifier, const void *union_obj, RequestType type) {
  switch (type) {
    case RequestType_NONE: return true;
    case RequestType_FileChmodRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::FileChmodRequest *>(union_obj));
    case RequestType_FileCloseRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::FileCloseRequest *>(union_obj));
    case RequestType_FileOpenRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::FileOpenRequest *>(union_obj));
    case RequestType_FileReadRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::FileReadRequest *>(union_obj));
    case RequestType_FileSeekRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::FileSeekRequest *>(union_obj));
    case RequestType_FileStatRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::FileStatRequest *>(union_obj));
    case RequestType_FileWriteRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::FileWriteRequest *>(union_obj));
    case RequestType_FileSELinuxGetLabelRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::FileSELinuxGetLabelRequest *>(union_obj));
    case RequestType_FileSELinuxSetLabelRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::FileSELinuxSetLabelRequest *>(union_obj));
    case RequestType_PathChmodRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::PathChmodRequest *>(union_obj));
    case RequestType_PathCopyRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::PathCopyRequest *>(union_obj));
    case RequestType_PathSELinuxGetLabelRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::PathSELinuxGetLabelRequest *>(union_obj));
    case RequestType_PathSELinuxSetLabelRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::PathSELinuxSetLabelRequest *>(union_obj));
    case RequestType_PathGetDirectorySizeRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::PathGetDirectorySizeRequest *>(union_obj));
    case RequestType_MbGetVersionRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::MbGetVersionRequest *>(union_obj));
    case RequestType_MbGetInstalledRomsRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::MbGetInstalledRomsRequest *>(union_obj));
    case RequestType_MbGetBootedRomIdRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::MbGetBootedRomIdRequest *>(union_obj));
    case RequestType_MbSwitchRomRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::MbSwitchRomRequest *>(union_obj));
    case RequestType_MbSetKernelRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::MbSetKernelRequest *>(union_obj));
    case RequestType_MbWipeRomRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::MbWipeRomRequest *>(union_obj));
    case RequestType_MbGetPackagesCountRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::MbGetPackagesCountRequest *>(union_obj));
    case RequestType_RebootRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::RebootRequest *>(union_obj));
    case RequestType_SignedExecRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::SignedExecRequest *>(union_obj));
    case RequestType_ShutdownRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::ShutdownRequest *>(union_obj));
    case RequestType_PathDeleteRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::PathDeleteRequest *>(union_obj));
    case RequestType_PathMkdirRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::PathMkdirRequest *>(union_obj));
    case RequestType_CryptoDecryptRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::CryptoDecryptRequest *>(union_obj));
    case RequestType_CryptoGetPwTypeRequest: return verifier.VerifyTable(reinterpret_cast<const mbtool::daemon::v3::CryptoGetPwTypeRequest *>(union_obj));
    default: return false;
  }
}

inline const mbtool::daemon::v3::Request *GetRequest(const void *buf) { return flatbuffers::GetRoot<mbtool::daemon::v3::Request>(buf); }

inline bool VerifyRequestBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<mbtool::daemon::v3::Request>(); }

inline void FinishRequestBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<mbtool::daemon::v3::Request> root) { fbb.Finish(root); }

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_REQUEST_MBTOOL_DAEMON_V3_H_
