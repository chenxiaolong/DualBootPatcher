// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FILESTAT_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_FILESTAT_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

namespace mbtool {
namespace daemon {
namespace v3 {

struct StructStat;

struct FileStatError;

struct FileStatRequest;

struct FileStatResponse;

struct StructStat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEV = 4,
    VT_INO = 6,
    VT_MODE = 8,
    VT_NLINK = 10,
    VT_UID = 12,
    VT_GID = 14,
    VT_RDEV = 16,
    VT_SIZE = 18,
    VT_BLKSIZE = 20,
    VT_BLOCKS = 22,
    VT_ATIME = 24,
    VT_MTIME = 26,
    VT_CTIME = 28
  };
  uint64_t dev() const {
    return GetField<uint64_t>(VT_DEV, 0);
  }
  uint64_t ino() const {
    return GetField<uint64_t>(VT_INO, 0);
  }
  uint32_t mode() const {
    return GetField<uint32_t>(VT_MODE, 0);
  }
  uint64_t nlink() const {
    return GetField<uint64_t>(VT_NLINK, 0);
  }
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  uint32_t gid() const {
    return GetField<uint32_t>(VT_GID, 0);
  }
  uint64_t rdev() const {
    return GetField<uint64_t>(VT_RDEV, 0);
  }
  uint64_t size() const {
    return GetField<uint64_t>(VT_SIZE, 0);
  }
  uint64_t blksize() const {
    return GetField<uint64_t>(VT_BLKSIZE, 0);
  }
  uint64_t blocks() const {
    return GetField<uint64_t>(VT_BLOCKS, 0);
  }
  uint64_t atime() const {
    return GetField<uint64_t>(VT_ATIME, 0);
  }
  uint64_t mtime() const {
    return GetField<uint64_t>(VT_MTIME, 0);
  }
  uint64_t ctime() const {
    return GetField<uint64_t>(VT_CTIME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_DEV) &&
           VerifyField<uint64_t>(verifier, VT_INO) &&
           VerifyField<uint32_t>(verifier, VT_MODE) &&
           VerifyField<uint64_t>(verifier, VT_NLINK) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           VerifyField<uint32_t>(verifier, VT_GID) &&
           VerifyField<uint64_t>(verifier, VT_RDEV) &&
           VerifyField<uint64_t>(verifier, VT_SIZE) &&
           VerifyField<uint64_t>(verifier, VT_BLKSIZE) &&
           VerifyField<uint64_t>(verifier, VT_BLOCKS) &&
           VerifyField<uint64_t>(verifier, VT_ATIME) &&
           VerifyField<uint64_t>(verifier, VT_MTIME) &&
           VerifyField<uint64_t>(verifier, VT_CTIME) &&
           verifier.EndTable();
  }
};

struct StructStatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dev(uint64_t dev) {
    fbb_.AddElement<uint64_t>(StructStat::VT_DEV, dev, 0);
  }
  void add_ino(uint64_t ino) {
    fbb_.AddElement<uint64_t>(StructStat::VT_INO, ino, 0);
  }
  void add_mode(uint32_t mode) {
    fbb_.AddElement<uint32_t>(StructStat::VT_MODE, mode, 0);
  }
  void add_nlink(uint64_t nlink) {
    fbb_.AddElement<uint64_t>(StructStat::VT_NLINK, nlink, 0);
  }
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(StructStat::VT_UID, uid, 0);
  }
  void add_gid(uint32_t gid) {
    fbb_.AddElement<uint32_t>(StructStat::VT_GID, gid, 0);
  }
  void add_rdev(uint64_t rdev) {
    fbb_.AddElement<uint64_t>(StructStat::VT_RDEV, rdev, 0);
  }
  void add_size(uint64_t size) {
    fbb_.AddElement<uint64_t>(StructStat::VT_SIZE, size, 0);
  }
  void add_blksize(uint64_t blksize) {
    fbb_.AddElement<uint64_t>(StructStat::VT_BLKSIZE, blksize, 0);
  }
  void add_blocks(uint64_t blocks) {
    fbb_.AddElement<uint64_t>(StructStat::VT_BLOCKS, blocks, 0);
  }
  void add_atime(uint64_t atime) {
    fbb_.AddElement<uint64_t>(StructStat::VT_ATIME, atime, 0);
  }
  void add_mtime(uint64_t mtime) {
    fbb_.AddElement<uint64_t>(StructStat::VT_MTIME, mtime, 0);
  }
  void add_ctime(uint64_t ctime) {
    fbb_.AddElement<uint64_t>(StructStat::VT_CTIME, ctime, 0);
  }
  StructStatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StructStatBuilder &operator=(const StructStatBuilder &);
  flatbuffers::Offset<StructStat> Finish() {
    const auto end = fbb_.EndTable(start_, 13);
    auto o = flatbuffers::Offset<StructStat>(end);
    return o;
  }
};

inline flatbuffers::Offset<StructStat> CreateStructStat(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t dev = 0,
    uint64_t ino = 0,
    uint32_t mode = 0,
    uint64_t nlink = 0,
    uint32_t uid = 0,
    uint32_t gid = 0,
    uint64_t rdev = 0,
    uint64_t size = 0,
    uint64_t blksize = 0,
    uint64_t blocks = 0,
    uint64_t atime = 0,
    uint64_t mtime = 0,
    uint64_t ctime = 0) {
  StructStatBuilder builder_(_fbb);
  builder_.add_ctime(ctime);
  builder_.add_mtime(mtime);
  builder_.add_atime(atime);
  builder_.add_blocks(blocks);
  builder_.add_blksize(blksize);
  builder_.add_size(size);
  builder_.add_rdev(rdev);
  builder_.add_nlink(nlink);
  builder_.add_ino(ino);
  builder_.add_dev(dev);
  builder_.add_gid(gid);
  builder_.add_uid(uid);
  builder_.add_mode(mode);
  return builder_.Finish();
}

struct FileStatError FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERRNO_VALUE = 4,
    VT_MSG = 6
  };
  int32_t errno_value() const {
    return GetField<int32_t>(VT_ERRNO_VALUE, 0);
  }
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERRNO_VALUE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MSG) &&
           verifier.Verify(msg()) &&
           verifier.EndTable();
  }
};

struct FileStatErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_errno_value(int32_t errno_value) {
    fbb_.AddElement<int32_t>(FileStatError::VT_ERRNO_VALUE, errno_value, 0);
  }
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(FileStatError::VT_MSG, msg);
  }
  FileStatErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FileStatErrorBuilder &operator=(const FileStatErrorBuilder &);
  flatbuffers::Offset<FileStatError> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<FileStatError>(end);
    return o;
  }
};

inline flatbuffers::Offset<FileStatError> CreateFileStatError(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t errno_value = 0,
    flatbuffers::Offset<flatbuffers::String> msg = 0) {
  FileStatErrorBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_errno_value(errno_value);
  return builder_.Finish();
}

inline flatbuffers::Offset<FileStatError> CreateFileStatErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t errno_value = 0,
    const char *msg = nullptr) {
  return mbtool::daemon::v3::CreateFileStatError(
      _fbb,
      errno_value,
      msg ? _fbb.CreateString(msg) : 0);
}

struct FileStatRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct FileStatRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(FileStatRequest::VT_ID, id, 0);
  }
  FileStatRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FileStatRequestBuilder &operator=(const FileStatRequestBuilder &);
  flatbuffers::Offset<FileStatRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<FileStatRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<FileStatRequest> CreateFileStatRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0) {
  FileStatRequestBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct FileStatResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SUCCESS = 4,
    VT_ERROR_MSG = 6,
    VT_STAT = 8,
    VT_ERROR = 10
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  const flatbuffers::String *error_msg() const {
    return GetPointer<const flatbuffers::String *>(VT_ERROR_MSG);
  }
  const StructStat *stat() const {
    return GetPointer<const StructStat *>(VT_STAT);
  }
  const FileStatError *error() const {
    return GetPointer<const FileStatError *>(VT_ERROR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ERROR_MSG) &&
           verifier.Verify(error_msg()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_STAT) &&
           verifier.VerifyTable(stat()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ERROR) &&
           verifier.VerifyTable(error()) &&
           verifier.EndTable();
  }
};

struct FileStatResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(FileStatResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  void add_error_msg(flatbuffers::Offset<flatbuffers::String> error_msg) {
    fbb_.AddOffset(FileStatResponse::VT_ERROR_MSG, error_msg);
  }
  void add_stat(flatbuffers::Offset<StructStat> stat) {
    fbb_.AddOffset(FileStatResponse::VT_STAT, stat);
  }
  void add_error(flatbuffers::Offset<FileStatError> error) {
    fbb_.AddOffset(FileStatResponse::VT_ERROR, error);
  }
  FileStatResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FileStatResponseBuilder &operator=(const FileStatResponseBuilder &);
  flatbuffers::Offset<FileStatResponse> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<FileStatResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<FileStatResponse> CreateFileStatResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    flatbuffers::Offset<flatbuffers::String> error_msg = 0,
    flatbuffers::Offset<StructStat> stat = 0,
    flatbuffers::Offset<FileStatError> error = 0) {
  FileStatResponseBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_stat(stat);
  builder_.add_error_msg(error_msg);
  builder_.add_success(success);
  return builder_.Finish();
}

inline flatbuffers::Offset<FileStatResponse> CreateFileStatResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    const char *error_msg = nullptr,
    flatbuffers::Offset<StructStat> stat = 0,
    flatbuffers::Offset<FileStatError> error = 0) {
  return mbtool::daemon::v3::CreateFileStatResponse(
      _fbb,
      success,
      error_msg ? _fbb.CreateString(error_msg) : 0,
      stat,
      error);
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_FILESTAT_MBTOOL_DAEMON_V3_H_
