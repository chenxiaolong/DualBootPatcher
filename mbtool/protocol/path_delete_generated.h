// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PATHDELETE_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_PATHDELETE_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"


namespace mbtool {
namespace daemon {
namespace v3 {

struct PathDeleteRequest;
struct PathDeleteResponse;

enum PathDeleteFlag {
  PathDeleteFlag_REMOVE = 0,
  PathDeleteFlag_UNLINK = 1,
  PathDeleteFlag_RMDIR = 2,
  PathDeleteFlag_RECURSIVE = 3,
  PathDeleteFlag_MIN = PathDeleteFlag_REMOVE,
  PathDeleteFlag_MAX = PathDeleteFlag_RECURSIVE
};

inline const char **EnumNamesPathDeleteFlag() {
  static const char *names[] = { "REMOVE", "UNLINK", "RMDIR", "RECURSIVE", nullptr };
  return names;
}

inline const char *EnumNamePathDeleteFlag(PathDeleteFlag e) { return EnumNamesPathDeleteFlag()[static_cast<int>(e)]; }

struct PathDeleteRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PATH = 4,
    VT_FLAG = 6
  };
  const flatbuffers::String *path() const { return GetPointer<const flatbuffers::String *>(VT_PATH); }
  PathDeleteFlag flag() const { return static_cast<PathDeleteFlag>(GetField<int16_t>(VT_FLAG, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PATH) &&
           verifier.Verify(path()) &&
           VerifyField<int16_t>(verifier, VT_FLAG) &&
           verifier.EndTable();
  }
};

struct PathDeleteRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) { fbb_.AddOffset(PathDeleteRequest::VT_PATH, path); }
  void add_flag(PathDeleteFlag flag) { fbb_.AddElement<int16_t>(PathDeleteRequest::VT_FLAG, static_cast<int16_t>(flag), 0); }
  PathDeleteRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PathDeleteRequestBuilder &operator=(const PathDeleteRequestBuilder &);
  flatbuffers::Offset<PathDeleteRequest> Finish() {
    auto o = flatbuffers::Offset<PathDeleteRequest>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PathDeleteRequest> CreatePathDeleteRequest(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> path = 0,
   PathDeleteFlag flag = PathDeleteFlag_REMOVE) {
  PathDeleteRequestBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_flag(flag);
  return builder_.Finish();
}

struct PathDeleteResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SUCCESS = 4,
    VT_ERROR_MSG = 6
  };
  bool success() const { return GetField<uint8_t>(VT_SUCCESS, 0) != 0; }
  const flatbuffers::String *error_msg() const { return GetPointer<const flatbuffers::String *>(VT_ERROR_MSG); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ERROR_MSG) &&
           verifier.Verify(error_msg()) &&
           verifier.EndTable();
  }
};

struct PathDeleteResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_success(bool success) { fbb_.AddElement<uint8_t>(PathDeleteResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0); }
  void add_error_msg(flatbuffers::Offset<flatbuffers::String> error_msg) { fbb_.AddOffset(PathDeleteResponse::VT_ERROR_MSG, error_msg); }
  PathDeleteResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PathDeleteResponseBuilder &operator=(const PathDeleteResponseBuilder &);
  flatbuffers::Offset<PathDeleteResponse> Finish() {
    auto o = flatbuffers::Offset<PathDeleteResponse>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<PathDeleteResponse> CreatePathDeleteResponse(flatbuffers::FlatBufferBuilder &_fbb,
   bool success = false,
   flatbuffers::Offset<flatbuffers::String> error_msg = 0) {
  PathDeleteResponseBuilder builder_(_fbb);
  builder_.add_error_msg(error_msg);
  builder_.add_success(success);
  return builder_.Finish();
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_PATHDELETE_MBTOOL_DAEMON_V3_H_
