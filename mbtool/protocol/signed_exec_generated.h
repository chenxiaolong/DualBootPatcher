// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIGNEDEXEC_MBTOOL_DAEMON_V3_H_
#define FLATBUFFERS_GENERATED_SIGNEDEXEC_MBTOOL_DAEMON_V3_H_

#include "flatbuffers/flatbuffers.h"

namespace mbtool {
namespace daemon {
namespace v3 {

struct SignedExecError;

struct SignedExecRequest;

struct SignedExecOutputResponse;

struct SignedExecResponse;

enum SignedExecResult {
  SignedExecResult_PROCESS_EXITED = 0,
  SignedExecResult_PROCESS_KILLED_BY_SIGNAL = 1,
  SignedExecResult_INVALID_SIGNATURE = 2,
  SignedExecResult_OTHER_ERROR = 3,
  SignedExecResult_MIN = SignedExecResult_PROCESS_EXITED,
  SignedExecResult_MAX = SignedExecResult_OTHER_ERROR
};

inline SignedExecResult (&EnumValuesSignedExecResult())[4] {
  static SignedExecResult values[] = {
    SignedExecResult_PROCESS_EXITED,
    SignedExecResult_PROCESS_KILLED_BY_SIGNAL,
    SignedExecResult_INVALID_SIGNATURE,
    SignedExecResult_OTHER_ERROR
  };
  return values;
}

inline const char **EnumNamesSignedExecResult() {
  static const char *names[] = {
    "PROCESS_EXITED",
    "PROCESS_KILLED_BY_SIGNAL",
    "INVALID_SIGNATURE",
    "OTHER_ERROR",
    nullptr
  };
  return names;
}

inline const char *EnumNameSignedExecResult(SignedExecResult e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesSignedExecResult()[index];
}

struct SignedExecError FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MSG = 4
  };
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.Verify(msg()) &&
           verifier.EndTable();
  }
};

struct SignedExecErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(SignedExecError::VT_MSG, msg);
  }
  explicit SignedExecErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SignedExecErrorBuilder &operator=(const SignedExecErrorBuilder &);
  flatbuffers::Offset<SignedExecError> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SignedExecError>(end);
    return o;
  }
};

inline flatbuffers::Offset<SignedExecError> CreateSignedExecError(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> msg = 0) {
  SignedExecErrorBuilder builder_(_fbb);
  builder_.add_msg(msg);
  return builder_.Finish();
}

inline flatbuffers::Offset<SignedExecError> CreateSignedExecErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *msg = nullptr) {
  return mbtool::daemon::v3::CreateSignedExecError(
      _fbb,
      msg ? _fbb.CreateString(msg) : 0);
}

struct SignedExecRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BINARY_PATH = 4,
    VT_SIGNATURE_PATH = 6,
    VT_ARGS = 8,
    VT_ARG0 = 10
  };
  const flatbuffers::String *binary_path() const {
    return GetPointer<const flatbuffers::String *>(VT_BINARY_PATH);
  }
  const flatbuffers::String *signature_path() const {
    return GetPointer<const flatbuffers::String *>(VT_SIGNATURE_PATH);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *args() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ARGS);
  }
  const flatbuffers::String *arg0() const {
    return GetPointer<const flatbuffers::String *>(VT_ARG0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BINARY_PATH) &&
           verifier.Verify(binary_path()) &&
           VerifyOffset(verifier, VT_SIGNATURE_PATH) &&
           verifier.Verify(signature_path()) &&
           VerifyOffset(verifier, VT_ARGS) &&
           verifier.Verify(args()) &&
           verifier.VerifyVectorOfStrings(args()) &&
           VerifyOffset(verifier, VT_ARG0) &&
           verifier.Verify(arg0()) &&
           verifier.EndTable();
  }
};

struct SignedExecRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_binary_path(flatbuffers::Offset<flatbuffers::String> binary_path) {
    fbb_.AddOffset(SignedExecRequest::VT_BINARY_PATH, binary_path);
  }
  void add_signature_path(flatbuffers::Offset<flatbuffers::String> signature_path) {
    fbb_.AddOffset(SignedExecRequest::VT_SIGNATURE_PATH, signature_path);
  }
  void add_args(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> args) {
    fbb_.AddOffset(SignedExecRequest::VT_ARGS, args);
  }
  void add_arg0(flatbuffers::Offset<flatbuffers::String> arg0) {
    fbb_.AddOffset(SignedExecRequest::VT_ARG0, arg0);
  }
  explicit SignedExecRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SignedExecRequestBuilder &operator=(const SignedExecRequestBuilder &);
  flatbuffers::Offset<SignedExecRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SignedExecRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<SignedExecRequest> CreateSignedExecRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> binary_path = 0,
    flatbuffers::Offset<flatbuffers::String> signature_path = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> args = 0,
    flatbuffers::Offset<flatbuffers::String> arg0 = 0) {
  SignedExecRequestBuilder builder_(_fbb);
  builder_.add_arg0(arg0);
  builder_.add_args(args);
  builder_.add_signature_path(signature_path);
  builder_.add_binary_path(binary_path);
  return builder_.Finish();
}

inline flatbuffers::Offset<SignedExecRequest> CreateSignedExecRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *binary_path = nullptr,
    const char *signature_path = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *args = nullptr,
    const char *arg0 = nullptr) {
  return mbtool::daemon::v3::CreateSignedExecRequest(
      _fbb,
      binary_path ? _fbb.CreateString(binary_path) : 0,
      signature_path ? _fbb.CreateString(signature_path) : 0,
      args ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*args) : 0,
      arg0 ? _fbb.CreateString(arg0) : 0);
}

struct SignedExecOutputResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LINE = 4
  };
  const flatbuffers::String *line() const {
    return GetPointer<const flatbuffers::String *>(VT_LINE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LINE) &&
           verifier.Verify(line()) &&
           verifier.EndTable();
  }
};

struct SignedExecOutputResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_line(flatbuffers::Offset<flatbuffers::String> line) {
    fbb_.AddOffset(SignedExecOutputResponse::VT_LINE, line);
  }
  explicit SignedExecOutputResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SignedExecOutputResponseBuilder &operator=(const SignedExecOutputResponseBuilder &);
  flatbuffers::Offset<SignedExecOutputResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SignedExecOutputResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<SignedExecOutputResponse> CreateSignedExecOutputResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> line = 0) {
  SignedExecOutputResponseBuilder builder_(_fbb);
  builder_.add_line(line);
  return builder_.Finish();
}

inline flatbuffers::Offset<SignedExecOutputResponse> CreateSignedExecOutputResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *line = nullptr) {
  return mbtool::daemon::v3::CreateSignedExecOutputResponse(
      _fbb,
      line ? _fbb.CreateString(line) : 0);
}

struct SignedExecResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_RESULT = 4,
    VT_ERROR_MSG = 6,
    VT_EXIT_STATUS = 8,
    VT_TERM_SIG = 10,
    VT_ERROR = 12
  };
  SignedExecResult result() const {
    return static_cast<SignedExecResult>(GetField<int16_t>(VT_RESULT, 0));
  }
  const flatbuffers::String *error_msg() const {
    return GetPointer<const flatbuffers::String *>(VT_ERROR_MSG);
  }
  int32_t exit_status() const {
    return GetField<int32_t>(VT_EXIT_STATUS, 0);
  }
  int32_t term_sig() const {
    return GetField<int32_t>(VT_TERM_SIG, 0);
  }
  const SignedExecError *error() const {
    return GetPointer<const SignedExecError *>(VT_ERROR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_RESULT) &&
           VerifyOffset(verifier, VT_ERROR_MSG) &&
           verifier.Verify(error_msg()) &&
           VerifyField<int32_t>(verifier, VT_EXIT_STATUS) &&
           VerifyField<int32_t>(verifier, VT_TERM_SIG) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyTable(error()) &&
           verifier.EndTable();
  }
};

struct SignedExecResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(SignedExecResult result) {
    fbb_.AddElement<int16_t>(SignedExecResponse::VT_RESULT, static_cast<int16_t>(result), 0);
  }
  void add_error_msg(flatbuffers::Offset<flatbuffers::String> error_msg) {
    fbb_.AddOffset(SignedExecResponse::VT_ERROR_MSG, error_msg);
  }
  void add_exit_status(int32_t exit_status) {
    fbb_.AddElement<int32_t>(SignedExecResponse::VT_EXIT_STATUS, exit_status, 0);
  }
  void add_term_sig(int32_t term_sig) {
    fbb_.AddElement<int32_t>(SignedExecResponse::VT_TERM_SIG, term_sig, 0);
  }
  void add_error(flatbuffers::Offset<SignedExecError> error) {
    fbb_.AddOffset(SignedExecResponse::VT_ERROR, error);
  }
  explicit SignedExecResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SignedExecResponseBuilder &operator=(const SignedExecResponseBuilder &);
  flatbuffers::Offset<SignedExecResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SignedExecResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<SignedExecResponse> CreateSignedExecResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    SignedExecResult result = SignedExecResult_PROCESS_EXITED,
    flatbuffers::Offset<flatbuffers::String> error_msg = 0,
    int32_t exit_status = 0,
    int32_t term_sig = 0,
    flatbuffers::Offset<SignedExecError> error = 0) {
  SignedExecResponseBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_term_sig(term_sig);
  builder_.add_exit_status(exit_status);
  builder_.add_error_msg(error_msg);
  builder_.add_result(result);
  return builder_.Finish();
}

inline flatbuffers::Offset<SignedExecResponse> CreateSignedExecResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    SignedExecResult result = SignedExecResult_PROCESS_EXITED,
    const char *error_msg = nullptr,
    int32_t exit_status = 0,
    int32_t term_sig = 0,
    flatbuffers::Offset<SignedExecError> error = 0) {
  return mbtool::daemon::v3::CreateSignedExecResponse(
      _fbb,
      result,
      error_msg ? _fbb.CreateString(error_msg) : 0,
      exit_status,
      term_sig,
      error);
}

}  // namespace v3
}  // namespace daemon
}  // namespace mbtool

#endif  // FLATBUFFERS_GENERATED_SIGNEDEXEC_MBTOOL_DAEMON_V3_H_
